//Generic Template Fast Window Generator Implementation

#undef SizeFuncType
#undef ValuFuncType
#define SizeFuncType _C(RFNL_FWSizeFunc, _, _T1)
#define ValuFuncType _C(RFNL_FWValuFunc, _, _T1)
/*
RClass(_RTClassName)
{
    RInherit(RObject);
    _T1 MinVar;
    _T1 MaxVar;
    _T1 Interval;
    
    SizeFuncType SizeFunc;
    ValuFuncType ValuFunc;
    
    Array_Define(_T1*, Buff);
};
*/

RCtor(_RTClassName)
{
    RInit(_RTClassName);
    Array_Ctor(_T1*, This -> Buff);
    This -> SizeFunc = (SizeFuncType)0;
    This -> ValuFunc = (ValuFuncType)0;
    This -> MinVar = 0;
    This -> MaxVar = 0;
    This -> Interval = 0;
}

RDtor(_RTClassName)
{
    _C(RFNL_FWindow_Gnrc_, _T1, _Reset)(This);
    Array_Dtor(_T1*, This -> Buff);
}

RTMethod(void, RFNL_FWindow_Gnrc, SetPara,
    _T1 MinVar, _T1 MaxVar, _T1 Interval)
{
    This -> MinVar = MinVar;
    This -> MaxVar = MaxVar;
    This -> Interval = Interval;
}

RTMethod(void, RFNL_FWindow_Gnrc, SetFunc,
    SizeFuncType SizeFunc, ValuFuncType ValuFunc)
{
    This -> SizeFunc = SizeFunc;
    This -> ValuFunc = ValuFunc;
}

RTMethod(int , RFNL_FWindow_Gnrc, Initialize)
{
    //Funcs not specified.
    if(This -> SizeFunc == 0 || This -> ValuFunc == 0)
        return 0;
    //Wrong parameters.
    if(This -> MaxVar < This -> MinVar || This -> Interval <= 0)
        return 0;
    
    int MaxSize = INT_MIN;
    int i = 0;
    _T1 Var;
    for(Var = This -> MinVar; Var < This -> MaxVar; Var += This -> Interval)
    {
        int Size = This -> SizeFunc(Var);
        MaxSize = Size > MaxSize ? Size : MaxSize;
        //Negative size error
        if(Size < 0) return 0;
        i ++;
    }
    
    //Setup array
    _C(RFNL_FWindow_Gnrc_, _T1, _Reset)(This);
    Array_Resize(_T1*, This -> Buff, i);
    for(i = 0; i <= This -> Buff_Index; i ++)
        This -> Buff[i] = RCall(RAlloc, _T1)(MaxSize);
    
    for(i = 0; i <= This -> Buff_Index; i ++)
    {
        int Size, j, Offset;
        _T1* IBuff = This -> Buff[i];
        Var = This -> MinVar + This -> Interval * i;
        Size = This -> SizeFunc(Var);
        Offset = (MaxSize - Size) / 2;
        for(j = 0; j < Offset; j ++)
            IBuff[j] = 0;
        for(; j < MaxSize - Offset; j ++)
            IBuff[j] = This -> ValuFunc(j - Offset, Size);
        for(; j < MaxSize; j ++)
            IBuff[j] = 0;
    }
    
    return 1;
}

RTMethod(int , RFNL_FWindow_Gnrc, Generate, _T1* Dest, _T1 Var);

RTMethod(void, RFNL_FWindow_Gnrc, Reset)
{
    int i;
    for(i = 0; i <= This -> Buff_Index; i ++)
        RFree(This -> Buff[i]);
    This -> Buff_Index = - 1;
}

