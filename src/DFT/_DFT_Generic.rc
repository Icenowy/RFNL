//Typical in-place radix-2 fft. No instruction set-specific optimizations.
//Slow but tiny and generic.
RTFunc(void, RFNL_Radix2_Generic, _T1* Real, _T1* Imag, int Power)
{
	int Layer;
	int i, j, k, pmul, current, another, currentBase;
	int Size;
	_T1 ReFactor, ImFactor;
	_T1 Re, Im;
	_T1 TPOS, TPOSTP;
	
	Size = pow(2, Power);
	TPOS = 2 * 3.1415926535 / Size;
	
    //For each layer in fft.
    for(Layer = 1; Layer <= Power; Layer ++)
    {
        j = pow(2, Layer - 1);
        pmul = pow(2, Power - Layer); //W_Amount ^ (0 to p interval j)
        for(i = 0; i < pmul; i ++)
        {
            currentBase = i * 2 * j;
            TPOSTP = TPOS * pmul;
            
            for(k = 0; k < j; k ++)
            {
                current = currentBase + k;
                another = current + j;
                
                ReFactor = cos(TPOSTP * k);
                ImFactor = - sin(TPOSTP * k);

                Re = Real[another];
                Real[another] = Real[another] * ReFactor - Imag[another] * ImFactor;
                Imag[another] = Imag[another] * ReFactor + Re * ImFactor;

                Re = Real[current];
                Im = Imag[current];
                Real[current] += Real[another];
                Imag[current] += Imag[another];

                Real[another] = Re - Real[another];
                Imag[another] = Im - Imag[another];
            }
        }
    }
}

RTFunc(void, __RFNL_FFT_IP_Generic, _T1* DestReal, _T1* DestImag, int Power)
{
    int Size = pow(2, Power);
    _T1* TempReal = RCall(RAlloc, _T1)(Size);
    _T1* TempImag = RCall(RAlloc, _T1)(Size);
    RCall(RFNL_CBitRev_Generic, _T1)
        (TempReal, TempImag, DestReal, DestImag, Power);
    memcpy(DestReal, TempReal, Size * sizeof(_T1));
    memcpy(DestImag, TempImag, Size * sizeof(_T1));
    RCall(RFNL_Radix2_Generic, _T1)
        (DestReal, DestImag, Power);
    RFree(TempReal);
    RFree(TempImag);
}

RTFunc(void, RFNL_RFFT_Generic, _T1* DestReal, _T1* DestImag,
                                _T1* SorcReal,
                                int Power)
{
    int Size = pow(2, Power);
    memset(DestImag, 0, Size * sizeof(_T1));
    //Inplace fft is not suggested.
    if(DestReal == SorcReal)
    {
        memcpy(DestReal, SorcReal, Size * sizeof(_T1));
        RCall(__RFNL_FFT_IP_Generic, _T1)(DestReal, DestImag, Power);
    }else
    {
        RCall(RFNL_RBitRev_Generic, _T1)
            (DestReal, SorcReal, Power);
        RCall(RFNL_Radix2_Generic, _T1)
            (DestReal, DestImag, Power);
    }
}

RTFunc(void, RFNL_CFFT_Generic, _T1* DestReal, _T1* DestImag,
                                _T1* SorcReal, _T1* SorcImag,
                                int Power)
{
    //Inplace fft is not suggested.
    if(DestReal == SorcReal || DestImag == SorcImag)
    {
        int Size = pow(2, Power);
        memcpy(DestReal, SorcReal, Size * sizeof(_T1));
        memcpy(DestImag, SorcImag, Size * sizeof(_T1));
        RCall(__RFNL_FFT_IP_Generic, _T1)(DestReal, DestImag, Power);
    }else
    {
        RCall(RFNL_CBitRev_Generic, _T1)
            (DestReal, DestImag, SorcReal, SorcImag, Power);
        RCall(RFNL_Radix2_Generic, _T1)
            (DestReal, DestImag, Power);
    }
}

